<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Solution.Core</name>
    </assembly>
    <members>
        <member name="T:Solution.Core.Extensions.DataTableExt">
            <summary>
            Extensions to DataTable type
            </summary>
        </member>
        <member name="M:Solution.Core.Extensions.DataTableExt.HasRows(System.Data.DataTable)">
            <summary>
            Check if the datatable is not null and contains rows
            </summary>
        </member>
        <member name="M:Solution.Core.Extensions.DataTableExt.HasRows(System.Data.DataTable,System.Int32)">
            <summary>
            Check if the datatable is not null and contain less than maxRow rows
            </summary>
        </member>
        <member name="M:Solution.Core.Extensions.DataTableExt.HasRows(System.Data.DataSet)">
            <summary>
            Check if the DataSet is not null and contains at least one DataTable with one DataRow
            </summary>
        </member>
        <member name="M:Solution.Core.Extensions.DataTableExt.HasRows(System.Data.DataSet,System.Int32)">
            <summary>
            Check if the DataSet is not null and contains at least one DataTable with less than maxRow rows
            </summary>
        </member>
        <member name="M:Solution.Core.Extensions.DataTableExt.ConvertToList``1(System.Data.DataTable)">
            <summary>
            Convert generic DataTable to T object matching columns names with properties names
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Extensions.DataTableExt.ConvertToDataTable``1(System.Collections.Generic.IList{``0})">
            <summary>
            Convert generic List T objects to new DataTable matching properties names with columns names
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Extensions.DataTableExt.GetItem``1(System.Data.DataRow)">
            <summary>
            Convert single DataRow to a specified Object T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="T:Solution.Core.Extensions.DateTimeExt">
            <summary>
            Static Extensions on DateTime type
            </summary>
        </member>
        <member name="M:Solution.Core.Extensions.DateTimeExt.ToStringOrDefault(System.Nullable{System.DateTime},System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Extensions.DateTimeExt.ToStringOrDefault(System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="format"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Extensions.DateTimeExt.IsBetween(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Check if the "source" date is between "dtFrom" and "dtTo"
            </summary>
        </member>
        <member name="T:Solution.Core.Extensions.DecimalExt">
            <summary>
            Static Extensions on Decimal type
            </summary>
        </member>
        <member name="M:Solution.Core.Extensions.DecimalExt.ToStringOrDefault(System.Nullable{System.Decimal},System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Extensions.DecimalExt.ToStringOrDefault(System.Nullable{System.Decimal},System.String,System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="format"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Extensions.ObjectExt.IsValid(System.Object)">
            <summary>
            Verify that an object expose a .ToString() method
            </summary>
        </member>
        <member name="M:Solution.Core.Extensions.StringExt.Truncate(System.String,System.Int32)">
            <summary>
            Tronca una stringa a limit caratteri
            </summary>
        </member>
        <member name="M:Solution.Core.Extensions.StringExt.SliceEnd(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Extensions.StringExt.JoinToString(System.Char[],System.Int32,System.Int32)">
            <summary>
            Esegue la Join di un char array dalla pasizione start per la lunghezza length
            </summary>
        </member>
        <member name="M:Solution.Core.Extensions.StringExt.CharString(System.Char,System.Int32)">
            <summary>
            Crea una stringa ripetendo length volte "c"
            </summary>
        </member>
        <member name="M:Solution.Core.Extensions.StringExt.UnPadLeft(System.String,System.Char)">
            <summary>
            Rimuove il padding a sinistra di una stringa
            </summary>
        </member>
        <member name="M:Solution.Core.Extensions.StringExt.UnPadRight(System.String,System.Char)">
            <summary>
            Rimuove il padding a destra di una stringa
            </summary>
        </member>
        <member name="M:Solution.Core.Extensions.StringExt.PadLeft(System.String,System.Char,System.Int32,System.Boolean)">
            <summary>
            Aggiunge padding a sinistra fino a length: 1 -> 0001. Opzionalmente spezza la stringa se piu lunga.
            </summary>
        </member>
        <member name="M:Solution.Core.Extensions.StringExt.PadRight(System.String,System.Char,System.Int32,System.Boolean)">
            <summary>
            Aggiunge padding a destra fino a length: 1 -> 1000. Opzionalmente spezza la stringa se piu lunga.
            </summary>
        </member>
        <member name="M:Solution.Core.Extensions.StringExt.HourIsBetween(System.String,System.String,System.String)">
            <summary>
            Verifica che l'ora "source" sia compresa fra gli orari "hourFrom" e "hourTo" (Converte in int).
            </summary>
        </member>
        <member name="T:Solution.Core.Utilities.BinaryUtil">
            <summary>
            Utilities to handle endianess conversions
            </summary>
        </member>
        <member name="M:Solution.Core.Utilities.BinaryUtil.ToBigEndian_Reverse(System.UInt16)">
            <summary>
            Converts the given unsigned short to big endian. 
            If the host machine is big endian no convertion is being performed.
            </summary>
            <param name="u"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Utilities.BinaryUtil.ToBigEndian(System.UInt16)">
            <summary>
            Converts the given unsigned short to big endian. 
            If the host machine is big endian no convertion is being performed.
            </summary>
            <param name="source">The unsigned short to convert.</param>
            <returns>The converted unsigned short.</returns>
        </member>
        <member name="M:Solution.Core.Utilities.BinaryUtil.ToBigEndian(System.UInt32)">
            <summary>
            Converts the given unsigned int to big endian. 
            If the host machine is big endian no convertion is being performed.
            </summary>
            <param name="source">The unsigned int to convert.</param>
            <returns>The converted unsigned int.</returns>
        </member>
        <member name="T:Solution.Core.Utilities.BitmapUtil">
            <summary>
            Utility to resize and crop BMP image format
            </summary>
        </member>
        <member name="M:Solution.Core.Utilities.BitmapUtil.ResizeMaxWidth(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Resize an image if it's over the maxWitdth (proportional: yes, grainy: no)
            </summary>
            <param name="src"></param>
            <param name="maxWidth"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Utilities.BitmapUtil.ResizeFixedWidth(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Resize an image to the newWidth (proportional: yes, grainy: yes)
            </summary>
            <param name="src"></param>
            <param name="newWidth"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Utilities.BitmapUtil.ResizeMaxHeight(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Resize an image if it's over the maxHeight (proportional: yes, grainy: no)
            </summary>
            <param name="src"></param>
            <param name="maxHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Utilities.BitmapUtil.ResizeFixedHeight(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Resize an image to the newHeight (proportional: yes, grainy: yes)
            </summary>
            <param name="src"></param>
            <param name="newHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Utilities.BitmapUtil.ResizeBoxOverflow(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Stretch an image to a provided box size (proportional: yes, grainy: yes)
            </summary>
            <param name="src"></param>
            <param name="boxWidth"></param>
            <param name="boxHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Utilities.BitmapUtil.ResizeBoxContained(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Reduce an image to a provided box size (proportional: yes, grainy: no)
            </summary>
            <param name="src"></param>
            <param name="boxWidth"></param>
            <param name="boxHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Utilities.BitmapUtil.ResizeStretched(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Stretch an image to a new size (proportional: no, grainy: yes)
            </summary>
            <param name="src"></param>
            <param name="newWidth"></param>
            <param name="newHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Utilities.BitmapUtil.Crop(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Crop an image to specified size from start point
            </summary>
            <param name="bitmap"></param>
            <param name="startPointX"></param>
            <param name="startPointY"></param>
            <param name="cropWidth"></param>
            <param name="cropHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Utilities.BitmapUtil.CropFromTopLeft(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Crop an image to specified size starting from top left corner
            </summary>
            <param name="bitmap"></param>
            <param name="cropWidth"></param>
            <param name="cropHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Utilities.BitmapUtil.CropSquare(System.Drawing.Bitmap)">
            <summary>
            Crop image to a square size starting from top left corner
            </summary>
            <param name="bitmap"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Utilities.BitmapUtil.ResizeAndCrop(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Resize an image to be fitted in specified box and crop it if something is outside 
            </summary>
            <param name="bitmap"></param>
            <param name="boxWidth"></param>
            <param name="boxHeight"></param>
            <returns></returns>
        </member>
        <member name="T:Solution.Core.Utilities.CmdUtil">
            <summary>
            Utility to launch external command inside a CMD 
            </summary>
        </member>
        <member name="M:Solution.Core.Utilities.CmdUtil.ExecuteCommandCmd(System.String)">
            <summary>
            Executed a command inside an external instance of CMD
            </summary>
            <param name="command">Command to be executed</param>
            <returns>Return the exit code of executed command</returns>
        </member>
        <member name="M:Solution.Core.Utilities.CmdUtil.ExecuteCommandCmd(System.String,System.String@,System.String@)">
            <summary>
            Executed a command inside an external instance of CMD
            </summary>
            <param name="command">Command to be executed</param>
            <param name="output">Standard output of the executed command</param>
            <param name="error">Standard error of the executed command</param>
            <returns>Return the exit code of executed command</returns>
        </member>
        <member name="M:Solution.Core.Utilities.CmdUtil.ExecuteCommand(System.String,System.String)">
            <summary>
            Executed a command registered to the system passing specified parameter
            </summary>
            <param name="command">Command to be executed</param>
            <param name="parameter">Parameter passed to the executed command</param>
            <returns>Return the exit code of executed command</returns>
        </member>
        <member name="M:Solution.Core.Utilities.CmdUtil.ExecuteCommand(System.String,System.String,System.String@,System.String@)">
            <summary>
            Executed a command registered to the system passing specified parameter
            </summary>
            <param name="command">Command to be executed</param>
            <param name="parameter">Parameter passed to the executed command</param>
            <param name="output">Standard output of the executed command</param>
            <param name="error">Standard error of the executed command</param>
            <returns>Return the exit code of executed command</returns>
        </member>
        <member name="T:Solution.Core.Utilities.ConfigUtil">
            <summary>
            Utility to help manage the update of appsetting value in .config files
            </summary>
        </member>
        <member name="M:Solution.Core.Utilities.ConfigUtil.UpdateAllSettings(System.Xml.XmlDocument)">
            <summary>
            Update the currrent application settings with given confing
            </summary>
            <param name="newConfig">XML containing the modified app.config settings</param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Utilities.ConfigUtil.UpdateSetting(System.String,System.String)">
            <summary>
            Update a single key in current application settings
            </summary>
            <param name="key">Key to be updated</param>
            <param name="value">Value to be inserted in new key</param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Utilities.ConfigUtil.RemoveSetting(System.String)">
            <summary>
            Remove a single key in current application settings
            </summary>
            <param name="key">Key to be removed</param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Utilities.ConfigUtil.GetConfigVersion">
            <summary>
            Return the current application app.config version
            </summary>
            <returns>String containing ConfigVersion</returns>
        </member>
        <member name="T:Solution.Core.Utilities.CryptoUtil">
            <summary>
            Utility to encrypt/decrypt using AES and generate hash using SHA256
            </summary>
        </member>
        <member name="T:Solution.Core.Utilities.CryptoUtil.HashFunction">
            <summary>
            Enum to indicate hash function 
            </summary>
        </member>
        <member name="F:Solution.Core.Utilities.CryptoUtil.HashFunction.MD5">
            <summary>
            Use MD5 function
            </summary>
        </member>
        <member name="F:Solution.Core.Utilities.CryptoUtil.HashFunction.SHA256">
            <summary>
            Use SHA256 function
            </summary>
        </member>
        <member name="M:Solution.Core.Utilities.CryptoUtil.EncryptString(System.String,System.Int32,System.String)">
            <summary>
            Function to encrypt a string using rsa crypto
            </summary>
            <param name="inputString">Input plain text to be encrypted</param>
            <param name="dwKeySize">RSA key size in bit, 2048</param>
            <param name="xmlString">xml containing the public/private key</param>
            <returns>Return the encrypted string encoded in Base64</returns>
        </member>
        <member name="M:Solution.Core.Utilities.CryptoUtil.DecryptString(System.String,System.Int32,System.String)">
            <summary>
            Function to decrypt a string using rsa crypto
            </summary>
            <param name="inputString">Input plain text to be encrypted</param>
            <param name="dwKeySize">RSA key size in bit, 2048</param>
            <param name="xmlString">xml containing the public/private key</param>
            <returns>Return the plain string</returns>
        </member>
        <member name="M:Solution.Core.Utilities.CryptoUtil.EncryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.String)">
            <summary>
            Function to encrypt a file using aes crypto
            </summary>
            <param name="inputFile">Input file to be encrypted</param>
            <param name="outputFile">Encrypted output file to be created</param>
            <param name="password">Password used to derivate symmetric key</param>
            <param name="salt">Salt used in combination with password to create the key</param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Utilities.CryptoUtil.DecryptFile(System.IO.FileInfo,System.IO.FileInfo,System.String,System.String)">
            <summary>
            Function to decrypt a file using aes crypto
            </summary>
            <param name="inputFile">Input file to be decripted</param>
            <param name="outputFile">Decripted output file to be created</param>
            <param name="password">Password used to derivate symmetric key</param>
            <param name="salt">Salt used in combination with password to create the key</param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Utilities.CryptoUtil.HashFile(System.IO.FileInfo,Solution.Core.Utilities.CryptoUtil.HashFunction)">
            <summary>
            Function to hash a file using SHA256 algoritm
            </summary>
            <param name="inputFile">Input file to be hashed</param>
            <param name="function">Specify with function to use in generating hash</param>
            <returns>Return the file hash encoded in Base64</returns>
        </member>
        <member name="T:Solution.Core.Utilities.CsvUtil">
            <summary>
            Utility to load and save CSV files between Disk and DataTable
            </summary>
        </member>
        <member name="M:Solution.Core.Utilities.CsvUtil.SerializeDataTable(System.Data.DataTable,System.String,System.String,System.Boolean)">
            <summary>
            Serialize a datatable to a string as a CSV with specified options
            </summary>
            <param name="exportTable">Datatable to be serialized</param>
            <param name="separator">Custom separator, default ;</param>
            <param name="wrapper">Custom field wrapper, default "</param>
            <param name="addHeadersFromTable">Specify if the first row serialized has to be the header row</param>
            <returns>String containing the CSV file</returns>
        </member>
        <member name="M:Solution.Core.Utilities.CsvUtil.LoadDataTable(System.IO.FileInfo,System.String,System.String,System.Boolean)">
            <summary>
            Load a CSV file inside a datatable using different format for parsing
            </summary>
            <param name="csvFile">FileInfo object that point to CSV file</param>
            <param name="separator">Custom separator, default ;</param>
            <param name="wrapper">Custom field wrapper, default "</param>
            <param name="csvContainHeaders">Specify if the first row contains header or actual table data</param>
            <returns>DataTable of the loaded CSV</returns>
        </member>
        <member name="T:Solution.Core.Utilities.FileUtil">
            <summary>
            Common operations on filesysten 
            </summary>
        </member>
        <member name="M:Solution.Core.Utilities.FileUtil.CheckAlreadyRunning">
            <summary>
            Check if the current process alredy exist in the system process list
            </summary>
            <returns>True if another process with the same name is found</returns>
        </member>
        <member name="M:Solution.Core.Utilities.FileUtil.GetLocalExecutionFullPah(System.String)">
            <summary>
            Find the full path for specified file relative to application executable
            </summary>
            <param name="fileName">File to found relative to executable</param>
            <returns>Full path of the specified file</returns>
        </member>
        <member name="M:Solution.Core.Utilities.FileUtil.GetFullPath(System.String)">
            <summary>
            Find out the full path of a specified folder
            </summary>
            <param name="path">Path (relative or full) that will be located in the system</param>
            <returns>Full path of the specified folder</returns>
        </member>
        <member name="M:Solution.Core.Utilities.FileUtil.CopyAll(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.Boolean,System.Boolean)">
            <summary>
            Copy all file and subdirectory inside a directory to a target
            </summary>
            <param name="source">Selected folder to be copied</param>
            <param name="target">Destination folder for the copy operation</param>
            <param name="overwrite">What to do in case a subfolder/file already exist</param>
            <param name="useTmpFile">Copy all file whith .tmp then remame them after all copies are finished</param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Utilities.FileUtil.CopyMatch(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String,System.Boolean,System.Boolean)">
            <summary>
            Copy matching files inside a directory to a target directory
            </summary>
            <param name="source">Selected folder to be copied</param>
            <param name="target">Destination folder for the copy operation</param>
            <param name="searchPattern">Search pattern for file to be copied</param>
            <param name="overwrite">What to do in case a subfolder/file already exist</param>
            <param name="useTmpFile">Copy all file whith .tmp then remame them after all copies are finished</param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Utilities.FileUtil.InitDirectory(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Create or clean the specified target directory
            </summary>
            <param name="target">DirectoryInfo to be initialized</param>
            <param name="overwrite">Params to tell if overwrite already existing directory</param>
        </member>
        <member name="M:Solution.Core.Utilities.FileUtil.CleanDirectory(System.IO.DirectoryInfo)">
            <summary>
            Remove all file and directory inside a specified target
            </summary>
            <param name="target">Directory to be cleaned</param>
        </member>
        <member name="M:Solution.Core.Utilities.FileUtil.GetDirectorySize(System.IO.DirectoryInfo,System.String)">
            <summary>
            Calculates the size of the directory
            </summary>
            <param name="target">DirectoryInfo targheting folder whose size must be retrieved</param>
            <param name="searchPattern">Filter file to be included in size calculation</param>
            <returns>Cumulative size in byte as long</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown when directory path doesn't exist</exception>
        </member>
        <member name="M:Solution.Core.Utilities.FileUtil.DeleteFile(System.IO.FileInfo)">
            <summary>
            Delete file even if it is a readonly one
            </summary>
            <param name="file">FileInfo of file to be removed</param>
        </member>
        <member name="M:Solution.Core.Utilities.FileUtil.Lock(System.IO.FileInfo,System.IO.FileStream@,System.Int32,System.IO.FileAccess)">
            <summary>
            Lock a file if its length is not changing during specified interval and the file is not already in use.
            </summary>
            <param name="file">FileInfo that point to file to be locked</param>
            <param name="lockedFileStream">FileStream handle to the locked file</param>
            <param name="mSecIntervalChecBeforeLocking">Window interval to check for file length changes</param>     
            <param name="access">Specify how to access the locked file</param>
            <returns>True if success or false if the file length is changing or the file is already locked.</returns>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when file doesn't exist</exception>
        </member>
        <member name="M:Solution.Core.Utilities.FileUtil.UnLock(System.IO.FileStream)">
            <summary>
            Unlock the fileStream
            </summary>
            <param name="fileStream">FileStream handle to the locked file</param>
        </member>
        <member name="M:Solution.Core.Utilities.FileUtil.IsFileSizeChanging(System.IO.FileInfo,System.Int32)">
            <summary>
            Check if the file size is changing during specified interval 
            </summary>
            <param name="file">FileInfo that point to file to be checked</param>
            <param name="mSecInterval">how many milliseconds wait before picking the file length again</param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when file doesn't exist</exception>
            <returns>True if the file size is chaning, false otherwise</returns>
        </member>
        <member name="M:Solution.Core.Utilities.FileUtil.IsDirCountChanging(System.IO.DirectoryInfo,System.Int32)">
            <summary>
            Check if element count inside a folder change during an interval
            </summary>
            <param name="target">DirectoryInfo that point to directory to be checked</param>
            <param name="mSecInterval">how many milliseconds wait before picking the file length again</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown when directory doesn't exist</exception>
            <returns>True if the Directory count is chaning, false otherwise</returns>
        </member>
        <member name="M:Solution.Core.Utilities.FileUtil.AddNetworkShare(System.String,System.String,System.String,System.String)">
            <summary>
            Connect remote share to local machine with provided authentication
            </summary>
            <param name="remoteShare">Remote UNC path with optional network drive letter</param>
            <param name="domain">RemoteShare user domain</param>
            <param name="username">Used to login on remoteShare</param>
            <param name="password">Used to login on remoteShare</param>
        </member>
        <member name="M:Solution.Core.Utilities.FileUtil.RemoveNetworkShare(System.String)">
            <summary>
            Disconnect remote share from local machine
            </summary>
            <param name="remoteShare">Remote UNC path or network drive letter</param>
        </member>
        <member name="T:Solution.Core.Utilities.GZipUtil">
            <summary>
            Utility to compress and decompress zip file using native framework libraries
            </summary>
        </member>
        <member name="M:Solution.Core.Utilities.GZipUtil.Compress(System.Byte[])">
            <summary>
            Compress a specified byte array using GZIP and return it
            </summary>
            <param name="plainData">Byte array to be compressed</param>
            <returns>Byte array compressed in GZIP format</returns>
        </member>
        <member name="M:Solution.Core.Utilities.GZipUtil.Compress(System.IO.Stream)">
            <summary>
            Compress a specified stream using GZIP and return it
            </summary>
            <param name="plainStream">Stream to be compressed</param>
            <returns>Compressed Stream in GZIP format</returns>
        </member>
        <member name="M:Solution.Core.Utilities.GZipUtil.Decompress(System.Byte[])">
            <summary>
            Decompress a specified GZIP byte array of data
            </summary>
            <param name="compressedData">Byte array to be decompressed</param>
            <returns>Byte array of resulting plain data</returns>
        </member>
        <member name="M:Solution.Core.Utilities.GZipUtil.Decompress(System.IO.Stream)">
            <summary>
            Decompress a specified GZIP stream of data
            </summary>
            <param name="compressedStream">Stream to be decompressed</param>
            <returns>Stream of resulting plain data</returns>
        </member>
        <member name="T:Solution.Core.Utilities.HtmlUtil">
            <summary>
            Utils to handle some quirks of http mimetypes or special characters 
            loosely based on http://remy.supertext.ch/2012/08/clean-filenames/
            </summary>
        </member>
        <member name="M:Solution.Core.Utilities.HtmlUtil.GetMIMEType(System.String)">
            <summary>
            Check the file extension to find the corrisponding mimetype
            </summary>
            <param name="fileName">Filename containing the extension part</param>
            <returns>Associated mimetype</returns>
        </member>
        <member name="M:Solution.Core.Utilities.HtmlUtil.BytesToString(System.Int64)">
            <summary>
            Convert file size in byte to a friendly text equivalent
            </summary>
            <param name="byteCount">File lenght</param>
            <returns>File size as readable string</returns>
        </member>
        <member name="M:Solution.Core.Utilities.HtmlUtil.RemoveNonWordChars(System.String)">
            <summary>
            
            http://stackoverflow.com/questions/3885964/regex-to-replace-invalid-characters
            </summary>
            <param name="source">String to be stripped</param>
            <returns>Cleaned string</returns>
        </member>
        <member name="M:Solution.Core.Utilities.HtmlUtil.RemoveNonWordChars(System.String,System.String)">
            <summary>
            Remove non basic characters (Latin alphabet and number) and replace them with provide replacement
            http://stackoverflow.com/questions/3885964/regex-to-replace-invalid-characters
            </summary>
            <param name="source">String to be stripped</param>
            <param name="replacement">String to be placed in uncommon characters</param>
            <returns>Cleaned string</returns>
        </member>
        <member name="M:Solution.Core.Utilities.HtmlUtil.CleanFileName(System.String)">
            <summary>
            Remove non basic characters (Latin alphabet and number) from given filename
            Usefull when you need to handle filename inside non UTF8 context
            </summary>
            <param name="fileName">String to be cleaned out</param>
            <returns>Cleaned filename</returns>
        </member>
        <member name="M:Solution.Core.Utilities.HtmlUtil.Base64Encode(System.String)">
            <summary>
            Encode UTF8 string to a Base64 one
            </summary>
            <param name="plainText">UTF8 string</param>
            <returns>Base64 string</returns>
        </member>
        <member name="M:Solution.Core.Utilities.HtmlUtil.Base64Decode(System.String)">
            <summary>
            Decode Base64 string to a UTF8 one
            </summary>
            <param name="base64EncodedData">Base64 string</param>
            <returns>UTF8 string</returns>
        </member>
        <member name="M:Solution.Core.Utilities.HtmlUtil.IsBase64String(System.String)">
            <summary>
            Check if inside a Base64 string not legal character are present
            </summary>
            <param name="base64EncodedData">Base64 string</param>
            <returns>True if no illegal character are found</returns>
        </member>
        <member name="T:Solution.Core.Utilities.LdapUtil">
            <summary>
            A sample LDAP client. For simplicity reasons, this clients only uses synchronous requests.
            Based on https://auth0.com/blog/using-ldap-with-c-sharp/
            </summary>
        </member>
        <member name="M:Solution.Core.Utilities.LdapUtil.CreateClient(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initialize and return the connection object without make the Bind operation
            </summary>
            <param name="hostname"></param>
            <param name="port"></param>
            <param name="domain"></param>
            <param name="username"></param>
            <param name="password"></param>
            <returns>Initialized object to LDAP server to be binded by external code</returns>
        </member>
        <member name="M:Solution.Core.Utilities.LdapUtil.Search(System.DirectoryServices.Protocols.LdapConnection,System.String,System.String)">
            <summary>
            Performs a search in the LDAP server. This method is generic in its return value to show the power
            of searches. A less generic search method could be implemented to only search for users, for instance.
            </summary>
            <param name="connection">An OPEN connection to LDAP server</param>
            <param name="baseDn">The distinguished name of the base node at which to start the search</param>
            <param name="ldapFilter">An LDAP filter as defined by RFC4515</param>
            <returns>A flat list of dictionaries which in turn include attributes and the distinguished name (DN)</returns>
        </member>
        <member name="M:Solution.Core.Utilities.LdapUtil.AddUser(System.DirectoryServices.Protocols.LdapConnection,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds a user to the LDAP server database. This method is intentionally less generic than the search one to
            make it easier to add meaningful information to the database.
            </summary>
            <param name="connection">An OPEN connection to LDAP server</param>
            <param name="user">Dictionary with the informations to be added, keys MUST be ldap fileds name</param>
        </member>
        <member name="M:Solution.Core.Utilities.LdapUtil.ChangeUserUid(System.DirectoryServices.Protocols.LdapConnection,System.String,System.String)">
            <summary>
            This method shows how to modify an attribute.
            </summary>
            <param name="connection">An OPEN connection to LDAP server</param>
            <param name="oldUid">Old user UID</param>
            <param name="newUid">New user UID</param>
        </member>
        <member name="M:Solution.Core.Utilities.LdapUtil.Delete(System.DirectoryServices.Protocols.LdapConnection,System.String)">
            <summary>
            This method shows how to delete anything by its distinguised name (DN).
            </summary>
            <param name="connection">An OPEN connection to LDAP server</param>
            <param name="dn">Distinguished name of the entry to delete</param>
        </member>
        <member name="M:Solution.Core.Utilities.LdapUtil.ValidateUser(System.DirectoryServices.Protocols.LdapConnection,System.String,System.String)">
            <summary>
            Searches for a user and compares the password.
            We assume all users are at base DN ou=users,dc=example,dc=com and that passwords are
            hashed using SHA1 (no salt) in OpenLDAP format.
            </summary>
            <param name="connection">An OPEN connection to LDAP server</param>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <returns>True if the credentials are valid, false otherwise</returns>
        </member>
        <member name="M:Solution.Core.Utilities.LdapUtil.ValidateUserByBind(System.DirectoryServices.Protocols.LdapConnection,System.String,System.String)">
            <summary>
            Another way of validating a user is by performing a bind. In this case the server
            queries its own database to validate the credentials. It is defined by the server
            how a user is mapped to its directory.
            </summary>
            <param name="connection">An OPEN connection to LDAP server</param>
            <param name="username">Username</param>
            <param name="password">Password</param>
            <returns>True if the credentials are valid, false otherwise</returns>
        </member>
        <member name="T:Solution.Core.Utilities.StringUtil">
            <summary>
            Additional operation on string values used in compare and parsing
            </summary>
        </member>
        <member name="M:Solution.Core.Utilities.StringUtil.Parse``1(System.Object)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Utilities.StringUtil.Parse``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Core.Utilities.StringUtil.Parse``1(System.String,System.Object)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:Solution.Core.Utilities.VersionComparerNumber">
            <summary>
            Comparer for dot separated versions with integer values
            </summary>
        </member>
        <member name="M:Solution.Core.Utilities.VersionComparerNumber.Compare(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Solution.Core.Utilities.VersionComparerString">
            <summary>
            Comparer for dot separated versions with string values
            </summary>
        </member>
        <member name="M:Solution.Core.Utilities.VersionComparerString.Compare(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Solution.Core.Utilities.XlstUtil">
            <summary>
            Utility to execute XSLT 1.0 transformations 
            </summary>
        </member>
        <member name="M:Solution.Core.Utilities.XlstUtil.Transform(System.String,System.String)">
            <summary>
            Load XML and transformation from specified path and return a stream with resulting HTML
            </summary>
            <param name="xslFile">Path where to find XSL transformation</param>
            <param name="xmlFile">Path where to find XML data file</param>
            <returns>MemoryStream containing an HTML</returns>
        </member>
        <member name="M:Solution.Core.Utilities.XlstUtil.Transform(System.String,System.String,System.String)">
            <summary>
            Load XML and transformation from specified path and write the resulting HTML to disk
            </summary>
            <param name="xslFile">Path where to find XSL transformation</param>
            <param name="xmlFile">Path where to find XML data file</param>
            <param name="resultFile">Path where to write the resulting HTML</param>
        </member>
    </members>
</doc>
