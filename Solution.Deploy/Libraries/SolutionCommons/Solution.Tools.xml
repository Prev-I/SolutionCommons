<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Solution.Tools</name>
    </assembly>
    <members>
        <member name="T:Solution.Tools.Utilities.AesCryptUtil">
            <summary>
            Class to handle the load and save from AES Crypt file format
            https://www.aescrypt.com/
            REQUIRE: SharpAESCrypt
            </summary>
        </member>
        <member name="M:Solution.Tools.Utilities.AesCryptUtil.EncryptFile(System.String,System.Byte[])">
            <summary>
            Encrypt input data to AES Crypt format using the provided password
            </summary>
            <param name="password">String used to encrypt data</param>
            <param name="inputData">Byte array of the plain data</param>
            <returns>Encrypted byte array</returns>
        </member>
        <member name="M:Solution.Tools.Utilities.AesCryptUtil.EncryptFile(System.String,System.String,System.String)">
            <summary>
            Encrypt input data to AES Crypt format using the provided password and save it to disk
            </summary>
            <param name="password">String used to encrypt data</param>
            <param name="inputFile">Full path of plain file</param>
            <param name="outputFile">Full path where to create encrypted file</param>
        </member>
        <member name="M:Solution.Tools.Utilities.AesCryptUtil.EncryptFile(System.String,System.IO.Stream)">
            <summary>
            Encrypt input data to AES Crypt format using the provided password and return it as stream
            </summary>
            <param name="password">String used to encrypt data</param>
            <param name="inputFileStream">Stream of plain content</param>
            <returns>Stream of encrypted data</returns>
        </member>
        <member name="M:Solution.Tools.Utilities.AesCryptUtil.DecryptFile(System.String,System.Byte[])">
            <summary>
            Decrypt input data in AES Crypt format using the provided password
            </summary>
            <param name="password">String used to decrypt data</param>
            <param name="inputData">Byte array of the encrypted file</param>
            <returns>Decrypted byte array</returns>
        </member>
        <member name="M:Solution.Tools.Utilities.AesCryptUtil.DecryptFile(System.String,System.String,System.String)">
            <summary>
            Decrypt input data in AES Crypt format using the provided password and save it on disk
            </summary>
            <param name="password">String used to decrypt data</param>
            <param name="inputFile">Full path of encrypted file</param>
            <param name="outputFile">Full path where to create decrypted file</param>
        </member>
        <member name="M:Solution.Tools.Utilities.AesCryptUtil.DecryptFile(System.String,System.IO.Stream)">
            <summary>
            Decrypt input data in AES Crypt format using the provided password and return as stream
            </summary>
            <param name="password">String used to decrypt data</param>
            <param name="inputFileStream">Stream of the encrypted content</param>
            <returns>Stream of decrypted data</returns>
        </member>
        <member name="T:Solution.Tools.Utilities.HttpUtil">
            <summary>
            Utility class to use Dot.Net HttpClient in memory efficient way
            REQUIRE: Newtonsoft.Json
            </summary>
        </member>
        <member name="M:Solution.Tools.Utilities.HttpUtil.GetAsync``1(System.Net.Http.HttpClient,System.Uri,System.Threading.CancellationToken)">
            <summary>
            Execute a GET request as async operation storing the result as a stream before parsing
            </summary>
            <typeparam name="T"></typeparam>
            <param name="client"></param>
            <param name="uri"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Tools.Utilities.HttpUtil.PostAsync(System.Net.Http.HttpClient,System.Uri,System.Object,System.Threading.CancellationToken)">
            <summary>
            Execute a POST request as async operation storing the content inside a stream before sending
            </summary>
            <param name="client"></param>
            <param name="uri"></param>
            <param name="content"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Tools.Utilities.HttpUtil.GetAsyncBasic``1(System.Net.Http.HttpClient,System.Uri,System.Threading.CancellationToken)">
            <summary>
            Execute a GET request as async operation storing the result in a string before parsing
            </summary>
            <typeparam name="T"></typeparam>
            <param name="client"></param>
            <param name="uri"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Tools.Utilities.HttpUtil.PostAsyncBasic(System.Net.Http.HttpClient,System.Uri,System.Object,System.Threading.CancellationToken)">
            <summary>
            Execute a POST request as async operation storing the content inside a string before sending
            </summary>
            <param name="client"></param>
            <param name="uri"></param>
            <param name="content"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Tools.Utilities.HttpUtil.AddToQueryString(System.String,System.String,System.String)">
            <summary>
            Parse the querystring, add a new key-value pair and return the result
            </summary>
            <param name="queryString"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Tools.Utilities.HttpUtil.CreateHttpContent(System.Object)">
            <summary>
            Serialize a generic object to JSON inside an HttpContent using a support stream
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:Solution.Tools.Utilities.ApiException">
            <summary>
            Exception on remote endpoint failed operations
            </summary>
        </member>
        <member name="P:Solution.Tools.Utilities.ApiException.StatusCode">
            <summary>
            HTTP status code
            </summary>
        </member>
        <member name="P:Solution.Tools.Utilities.ApiException.Content">
            <summary>
            Content of the failed method
            </summary>
        </member>
        <member name="T:Solution.Tools.Utilities.ImageUtil">
            <summary>
            Utility for image manipulations using ImageMagick as backend
            REQUIRED: ImageMagick
            </summary>
        </member>
        <member name="T:Solution.Tools.Utilities.JsonUtil">
            <summary>
            Utility to handle serializzation and deserializzation of JSON from Stream
            REQUIRE: Newtonsoft.Json
            </summary>
        </member>
        <member name="M:Solution.Tools.Utilities.JsonUtil.Serialize(System.Object,Newtonsoft.Json.Formatting)">
            <summary>
            Serialize an object to JSON stream using Json.Net
            </summary>
            <param name="value">Any DotNet object</param>
            <param name="jsonFormat">Specify if indent when formatting</param>
            <returns>Stream pointing to a valid JSON</returns>
        </member>
        <member name="M:Solution.Tools.Utilities.JsonUtil.Deserialize``1(System.IO.Stream,Newtonsoft.Json.Formatting)">
            <summary>
            Deserialize a JSON stream to a type T object using Json.Net
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonStream">Stream pointing to a valid JSON</param>
            <param name="jsonFormat">Specify if provided JSON is indented</param>
            <returns>DotNet object casted to type T</returns>
        </member>
        <member name="M:Solution.Tools.Utilities.JsonUtil.StreamToStringAsync(System.IO.Stream)">
            <summary>
            Support function to serialize json asynchronously
            </summary>
            <param name="stream">JSON stream to be serialized</param>
            <returns>Task with serialized JSON string</returns>
        </member>
        <member name="T:Solution.Tools.Utilities.NpgsqlUtil">
            <summary>
            Utility to execute SQL command on PostgreSQL DBMS
            REQUIRE: Npgsql
            </summary>
        </member>
        <member name="T:Solution.Tools.Utilities.OpenXmlUtil">
            <summary>
            Utility class to help common operations on Office files
            REQUIRE: DocumentFormat.OpenXml
            </summary>
        </member>
        <member name="T:Solution.Tools.Utilities.PdfUtil">
            <summary>
            Utility to manage pdf using ItextSharp
            REQUIRE: iTextSharp
            </summary>
        </member>
        <member name="M:Solution.Tools.Utilities.PdfUtil.ExtractImagesInfo(System.String)">
            <summary>
            Extracts all images (of types that iTextSharp knows how to decode) from a PDF file.
            </summary>
            <param name="fileName">Full path to pdf file</param>
            <returns></returns>
        </member>
        <member name="T:Solution.Tools.Utilities.ImageInfo">
            <summary>
            Class containing all the metadata extracted from image
            </summary>
        </member>
        <member name="T:Solution.Tools.Utilities.PostgreSQLUtil">
            <summary>
            Utility generate SQL statements (compatible with PostgreSQL) from CLR objects
            REQUIRE: Npgsql
            </summary>
        </member>
        <member name="T:Solution.Tools.Utilities.SevenZipUtil">
            <summary>
            Class to handle compression and decompression of archives supported by 7zip 
            REQUIRE: SevenZip
            REQUIRE: /Libraries/SevenZip/ in the root directory to load 7z.dll for x86 or x64 arch
            </summary>
        </member>
        <member name="M:Solution.Tools.Utilities.SevenZipUtil.Compress(System.String[],System.String)">
            <summary>
            Compress al inputFiles to destination sevenZip archive
            </summary>
            <param name="inputFiles">Array of full path of input files</param>
            <param name="destinationFile">Path of where to create 7z archive</param>
        </member>
        <member name="M:Solution.Tools.Utilities.SevenZipUtil.Compress(System.IO.DirectoryInfo,System.String)">
            <summary>
            Compress al inputFiles to destination sevenZip archive
            </summary>
            <param name="inputDir">DirectoryInfo of a folder to be compressed</param>
            <param name="destinationFile">Path of where to create 7z archive</param>
        </member>
        <member name="M:Solution.Tools.Utilities.SevenZipUtil.Decompress(System.String,System.String)">
            <summary>
            Decompress file contained in inputFile inside a destinationDir
            </summary>
            <param name="inputFile">Path to 7z archive</param>
            <param name="destinationDir">Directory where to put the archive content</param>
            <returns>Return true if extraction is succeded, false otherwise</returns>
        </member>
        <member name="T:Solution.Tools.Utilities.SftpUtil">
            <summary>
            Utility to provide wrapper around common SFTP operations from the SSH.NET library
            REQUIRE SSH.NET
            </summary>
        </member>
        <member name="T:Solution.Tools.Utilities.SftpUtil.SftpElementListType">
            <summary>
            Enum to indicate files / folders / both 
            </summary>
        </member>
        <member name="F:Solution.Tools.Utilities.SftpUtil.SftpElementListType.FILES_ONLY">
            <summary>
            Only files
            </summary>
        </member>
        <member name="F:Solution.Tools.Utilities.SftpUtil.SftpElementListType.DIRECTORIES_ONLY">
            <summary>
            Only folders
            </summary>
        </member>
        <member name="F:Solution.Tools.Utilities.SftpUtil.SftpElementListType.FILES_AND_DIRECTORIES">
            <summary>
            Both files and folders
            </summary>
        </member>
        <member name="M:Solution.Tools.Utilities.SftpUtil.CreateClient(System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Initialize and return an SftpClient object without connecting to remote host
            </summary>
            <param name="hostname"></param>
            <param name="port"></param>
            <param name="username"></param>
            <param name="password"></param>
            <param name="privateKeyFile"></param>
            <param name="passPhrase"></param>
            <returns>Initialized object to SFTP host to be connected by external code</returns>
        </member>
        <member name="T:Solution.Tools.Utilities.SqlUtil">
            <summary>
            Utility to execute SQL command on SQLServer DBMS
            </summary>
        </member>
        <member name="T:Solution.Tools.Utilities.ZipUtil">
            <summary>
            Utility class to compress/decompress data in zip format
            REQUIRE: Ionic.Zip
            </summary>
        </member>
        <member name="M:Solution.Tools.Utilities.ZipUtil.CompressInMemory(System.Byte[],System.String)">
            <summary>
            Compress a byte[] of data from a single file to a ZIP stored inside a memory stream
            </summary>
            <param name="plainData"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Tools.Utilities.ZipUtil.CompressInMemory(System.IO.Stream,System.String)">
            <summary>
            Compress a Stream of data from a single file to a ZIP inside a memory stream
            </summary>
            <param name="plainStream"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Tools.Utilities.ZipUtil.CompressOnDisk(System.Byte[],System.String,System.String)">
            <summary>
            Compress a byte[] of data from a single file to a ZIP file on disk
            </summary>
            <param name="plainData"></param>
            <param name="zipFile"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Tools.Utilities.ZipUtil.CompressOnDisk(System.IO.Stream,System.String,System.String)">
            <summary>
            Compress a Stream of data from a single file to a ZIP file on disk
            </summary>
            <param name="plainStream"></param>
            <param name="zipFile"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Tools.Utilities.ZipUtil.DecompressInMemory(System.Byte[],System.String)">
            <summary>
            Decompress a single file from a zip archive passed as byte[]
            </summary>
            <param name="compressedData"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Tools.Utilities.ZipUtil.DecompressInMemory(System.IO.Stream,System.String)">
            <summary>
            Decompress a single file from a zip archive passed as Stream
            </summary>
            <param name="compressedStream"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Tools.Utilities.ZipUtil.DecompressOnDisk(System.Byte[],System.String,System.String,System.String)">
            <summary>
            Decompress a single file from a zip archive passed as byte[] saving it on disk
            </summary>
            <param name="compressedData"></param>
            <param name="destinationDir"></param>
            <param name="zipFile"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Solution.Tools.Utilities.ZipUtil.DecompressOnDisk(System.IO.Stream,System.String,System.String,System.String)">
            <summary>
            Decompress a single file from a zip archive passed as Stream saving it on disk
            </summary>
            <param name="compressedStream"></param>
            <param name="destinationDir"></param>
            <param name="zipFile"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
    </members>
</doc>
